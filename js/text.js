//Стро­ка – это не­из­ме­няе­мая, упо­ря­до­чен­ная по­сле­до­ва­тель­ность 16-би­тных зна­че­ний, ка­ж­дое из ко­то­рых обыч­но пред­став­ля­ет сим­вол Юни­ко­да. Стро­ки в Ja­va­Script яв­ля­ют­ся ти­пом дан­ных, ис­поль­зуе­мым для пред­став­ле­ния тек­ста. Дли­на стро­ки – это ко­ли­че­ст­во 16-би­тных зна­че­ний, со­дер­жа­щих­ся в ней. Ну­ме­ра­ция сим­во­лов в стро­ках (и эле­мен­тов в мас­си­вах) в язы­ке Ja­va­Script на­чи­на­ет­ся с ну­ля: пер­вое 16-би­тное зна­че­ние на­хо­дит­ся в по­зи­ции 0, вто­рое – в по­зи­ции 1 и т. д.

//Пус­тая стро­ка – это стро­ка, дли­на ко­то­рой рав­на 0. В язы­ке Ja­va­Script нет спе­ ци­аль­но­го ти­па для пред­став­ле­ния един­ст­вен­но­го эле­мен­та стро­ки. Для пред­став­ле­ния един­ст­вен­но­го 16-би­тно­го зна­че­ния про­сто ис­поль­зу­ет­ся стро­ка с дли­ной, рав­ной 1.
	
//Строковые литералы
//Что­бы вклю­чить ли­те­рал стро­ки в Ja­va­Script-про­грам­му, дос­та­точ­но про­сто за­клю­чить сим­во­лы стро­ки в  пар­ные оди­нар­ные или двой­ные ка­выч­ки (' или "). Сим­во­лы двой­ных ка­вы­чек мо­гут со­дер­жать­ся в стро­ках, ог­ра­ни­чен­ных сим­во­ла­ми оди­нар­ных ка­вы­чек, а  сим­во­лы оди­нар­ных ка­вы­чек – в  стро­ках, ог­ра­ни­чен­ных сим­во­ла­ми двой­ных ка­вы­чек. Ни­же при­во­дят­ся не­сколь­ко при­ме­ров стро­ко­вых ли­те­ра­лов:

""             // Это пус­тая стро­ка: в ней ноль сим­во­лов
'testing'
"3.14"
'name="myform"'
"Вы пред­по­чи­тае­те кни­ги из­да­тель­ст­ва O'Reilly, не прав­да ли?"
"В этом стро­ко­вом ли­те­ра­ле\nдве стро­ки"
"π – это от­но­ше­ние дли­ны ок­руж­но­сти к ее диа­мет­ру"

//В ECMA­Script 3 стро­ко­вые ли­те­ра­лы долж­ны за­пи­сы­вать­ся в од­ной стро­ке про­грам­мы и не мо­гут раз­би­вать­ся на две стро­ки. Од­на­ко в ECMAScript 5 стро­ко­вые ли­те­ра­лы мож­но раз­би­вать на не­сколь­ко строк, за­кан­чи­вая ка­ж­дую стро­ку, кро­ме по­след­ней, сим­во­лом об­рат­но­го слэ­ша (\). Ни один из сим­во­лов об­рат­но­го слэ­ша, как и  сле­дую­щие за ни­ми сим­во­лы пе­ре­во­да стро­ки, не бу­дут вклю­че­ны в стро­ко­вый ли­те­рал. Что­бы вклю­чить в стро­ко­вый ли­те­рал сим­вол пе­ре­во­да стро­ки, сле­ду­ет ис­поль­зо­вать по­сле­до­ва­тель­ность сим­во­лов \n (опи­сы­ва­ет­ся ни­же):
"две\nстроки"  			// Стро­ко­вый ли­те­рал, пред­став­ляю­щий две стро­ки
"од­на\         			// Од­на стро­ка, за­пи­сан­ная в трех стро­ках. Толь­ко в ECMAScript 5
длин­ная\
стро­ка"

//Символы, кодовые пункты и строки JavaScript Для пред­став­ле­ния сим­во­лов Юни­ко­да в  язы­ке Ja­va­Script ис­поль­зу­ет­ся ко­ди­ров­ка UTF-16, а  стро­ки Ja­va­Script яв­ля­ют­ся по­сле­до­ва­тель­но­стя­ми 16-би­тных зна­че­ний без зна­ка. Боль­шин­ст­во наи­бо­лее час­то ис­поль­зуе­мых сим­во­лов Юни­ко­да (из «ос­нов­ной мно­го­язы­ко­вой мат­ри­цы») име­ют ко­до­вые пунк­ты, уме­щаю­щие­ся в  16 би­т, и  мо­гут быть пред­став­ле­ны един­ст­вен­ным эле­мен­том стро­ки. Сим­во­лы Юни­ко­да, ко­до­вые пунк­ты ко­то­рых не уме­ща­ют­ся в 16 би­т, ко­ди­ру­ют­ся в со­от­вет­ст­вии с пра­ви­ла­ми ко­ди­ров­ки UTF-16 как по­сле­до­ва­тель­но­сти (из­вест­ные как «сур­ро­гат­ные па­ры») из двух 16-би­тных зна­че­ний. Это оз­на­ча­ет, что стро­ка Ja­va­Script, имею­щая дли­ну, рав­ную 2 (два 16-би­тных зна­че­ния), мо­жет пред­став­лять един­ст­вен­ный сим­вол Юни­ко­да:

var p = "π"; //π - это 1 сим­вол с 16-би­тным ко­до­вым пунк­том 0x03c0
var e = "e"; //e - это 1 сим­вол с 17-би­тным ко­до­вым пунк­том 0x1d452
p.length     //=> 1: p со­дер­жит един­ст­вен­ный 16-би­тный эле­мент
e.length     //=> 2: в ко­ди­ров­ке UTF-16 сим­вол e оп­ре­де­ля­ет­ся дву­мя
             //16-би­тны­ми зна­че­ния­ми: "\ud835\udc52"

//Про­грам­мы на кли­ент­ском Ja­va­Script час­то со­дер­жат стро­ки HTML-ко­да, а HTML-код, в свою оче­редь, час­то со­дер­жит стро­ки Ja­va­Script-ко­да. Как и в Ja­va­Script, в язы­ке HTML для ог­ра­ни­че­ния строк при­ме­ня­ют­ся ли­бо оди­нар­ные, ли­бо двой­ные ка­выч­ки. По­это­му при объ­еди­не­нии Ja­va­Script- и  HTML-ко­да есть смысл при­дер­жи­вать­ся од­но­го «сти­ля» ка­вы­чек для Ja­va­Script, а дру­го­го – для HTML.
//В  сле­дую­щем при­ме­ре стро­ка «Спа­си­бо» в  Ja­va­Script-вы­ра­же­нии за­клю­че­на в оди­нар­ные ка­выч­ки, а са­мо вы­ра­же­ние, в свою оче­редь, за­клю­че­но в двой­ные ка­выч­ки как зна­че­ние HTML-ат­ри­бу­та об­ра­бот­чи­ка со­бы­тий:
<button onclick="alert('Спасибо')">Щелк­ни на мне</button>

//Управляющие последовательности в строковых литералах
//Сим­вол об­рат­но­го слэ­ша (\) име­ет спе­ци­аль­ное на­зна­че­ние в Ja­va­Script-стро­ках. Вме­сте с  сим­во­ла­ми, сле­дую­щи­ми за ним, он обо­зна­ча­ет сим­вол, не пред­ста­ви­мый внут­ри стро­ки дру­ги­ми спо­со­ба­ми. На­при­мер, \n – это управ­ляю­щая по­сле­ до­ва­тель­ность (escape sequence), обо­зна­чаю­щая сим­вол пе­ре­во­да стро­ки. 
//Дру­гой при­мер, упо­мя­ну­тый вы­ше, – это по­сле­до­ва­тель­ность \', обо­зна­чаю­щая сим­вол оди­нар­ной ка­выч­ки. Эта управ­ляю­щая по­сле­до­ва­тель­ность не­об­хо­ди­ма для вклю­че­ния сим­во­ла оди­нар­ной ка­выч­ки в стро­ко­вый ли­те­рал, за­клю­чен­ный в оди­нар­ные ка­выч­ки. Те­перь ста­но­вит­ся по­нят­но, по­че­му мы на­зы­ва­ем эти по­сле­ до­ва­тель­но­сти управ­ляю­щи­ми – здесь сим­вол об­рат­но­го слэ­ша по­зво­ля­ет управ­лять ин­тер­пре­та­ци­ей сим­во­ла оди­нар­ной ка­выч­ки. Вме­сто то­го что­бы от­ме­чать ею ко­нец стро­ки, мы ис­поль­зу­ем ее как апо­ст­роф:
'You\'re right, it can\'t be a quote'


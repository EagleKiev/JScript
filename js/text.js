//Строка – это неизменяемая, упорядоченная последовательность 16-битных значений, каждое из которых обычно
//представляет символ Юникода. Строки в JavaScript являются типом данных, используемым для представления текста.
//Длина строки – это количество 16-битных значений, содержащихся в ней. Нумерация символов в строках (и элементов
//в массивах) в языке JavaScript начинается с нуля: первое 16-битное значение находится в позиции 0, второе – в
//пози­ции 1 и т. д.

//Пустая строка – это строка, длина которой равна 0. В языке JavaScript нет специального типа для представления
//единственного элемента строки. Для представления единственного 16-битного значения просто используется строка
//с длиной, равной 1.
	
//Строковые литералы
//Чтобы включить литерал строки в JavaScript-программу, достаточно просто заключить символы строки в парные
//одинарные или двойные кавычки (' или "). Символы двойных кавычек могут содержаться в строках, ограниченных
//символами одинарных кавычек, а символы одинарных кавычек – в строках, ограниченных символами двойных кавычек.
//Ниже приводятся несколько примеров строковых литералов:

""             // Это пустая строка: в ней ноль символов
'testing'
"3.14"
'name="myform"'
"Вы предпочитаете книги издательства O'Reilly, не правда ли?"
"В этом строковом литерале\nдве строки"
"π – это отношение длины окружности к ее диаметру"

//В ECMA­Script 3 строковые литералы должны записываться в одной строке программы и не могут разбиваться на две
//строки. Однако в ECMAScript 5 строковые литералы можно разбивать на несколько строк, заканчивая каждую строку,
//кроме последней, символом обратного слэша (\). Ни один из символов обратного слэша, как и следующие за ними
//символы перевода строки, не будут включены в строковый литерал. Чтобы включить в строковый литерал символ
//перевода строки, следует использовать последовательность символов \n (описывается ниже):
"две\nстроки"  			// Строковый литерал, представляющий две строки
"одна\         			// Одна строка, записанная в трех строках. Только в ECMAScript 5
длинная\
строка"

//Символы, кодовые пункты и строки JavaScript Для представления символов Юникода в языке JavaScript используется
//кодировка UTF-16, а строки JavaScript являются последовательностями 16-битных значений без знака. Большинство
//наиболее часто используемых символов Юникода (из «основной многоязыковой матрицы») имеют кодовые пункты,
//умещающиеся в 16 бит, и могут быть представлены единственным элементом строки. Символы Юникода, кодовые пункты
//которых не умещаются в 16 бит, кодируются в соответствии с правилами кодировки UTF-16 как последовательности
//(известные как «суррогатные пары») из двух 16-битных значений. Это означает, что строка JavaScript, имеющая
//длину, равную 2 (два 16-битных значения), может представлять единственный символ Юникода:

var p = "π"; //π - это 1 символ с 16-битным кодовым пунктом 0x03c0
var e = "e"; //e - это 1 символ с 17-битным кодовым пунктом 0x1d452
p.length     //=> 1: p содержит единственный 16-битный элемент
e.length     //=> 2: в кодировке UTF-16 символ e определяется двумя
             //16-битными значениями: "\ud835\udc52"

//Программы на клиентском JavaScript часто содержат строки HTML-кода, а HTML-код, в свою очередь, часто содержит
//строки JavaScript-кода. Как и в JavaScript, в языке HTML для ограничения строк применяются либо одинарные, либо
//двойные кавычки. Поэтому при объединении JavaScript и HTML-кода есть смысл придерживаться одного «стиля» кавычек
//для JavaScript, а другого – для HTML.

//В следующем примере строка «Спасибо» в  JavaScript-выражении заключена в одинарные кавычки, а само выражение,
//в свою очередь, заключено в двойные кавычки как значение HTML-атрибута обработчика событий:

<button onclick="alert('Спасибо')">Щелкни на мне</button>

//Управляющие последовательности в строковых литералах
//Символ обратного слэша (\) имеет специальное назначение в JavaScript-строках. Вместе с символами, следующими за
//ним, он обозначает символ, не представимый внутри строки другими способами. Например, \n – это управляющая
//последовательность (escape sequence), обозначающая символ перевода строки.

//Другой пример, упомянутый выше, – это последовательность \', обозначающая символ одинарной кавычки. Эта
//управляющая последовательность необходима для включения символа одинарной кавычки в строковый литерал, заключенный
//в одинарные кавычки. Теперь становится понятно, почему мы называем эти последовательности управляющими – здесь
//символ обратного слэша позволяет управлять интерпретацией символа одинарной кавычки. Вместо того чтобы отмечать
//ею конец строки, мы используем ее как апостроф:

'You\'re right, it can\'t be a quote'


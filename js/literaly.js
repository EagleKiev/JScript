12             //Чис­ло две­на­дцать
1.2            //Чис­ло од­на це­лая две де­ся­тых
"hello world"  //Стро­ка тек­ста
'Hi'           //Дру­гая стро­ка
true           //Ло­ги­че­ское зна­че­ние
false          //Дру­гое ло­ги­че­ское зна­че­ние
/ja­va­script/gi //Ли­те­рал "ре­гу­ляр­но­го вы­ра­же­ния" (для по­ис­ка по шаб­ло­ну)
null           //Пус­той объ­ект
{ x:1, y:2 }   //Ини­циа­ли­за­тор объ­ек­та
[1,2,3,4,5]    //Ини­циа­ли­за­тор мас­си­ва

//Иден­ти­фи­ка­тор – это про­сто имя. В  Ja­va­Script иден­ти­фи­ка­то­ры вы­сту­па­ют в ка­че­ст­ве имен пе­ре­мен­ных и функ­ций, а так­же ме­ток не­ко­то­рых цик­лов. Иден­ти­фи­ка­то­ры в Ja­va­Script долж­ны на­чи­нать­ся с бу­к­вы, с сим­во­ла под­чер­ки­ва­ния (_) или зна­ка дол­ла­ра ($). Да­лее мо­гут сле­до­вать лю­бые бу­к­вы, циф­ры, сим­во­лы под­чер­ки­ва­ния или зна­ки дол­ла­ра. (Циф­ра не мо­жет быть пер­вым сим­во­лом, так как то­гда ин­тер­пре­та­то­ру труд­но бу­дет от­ли­чать иден­ти­фи­ка­то­ры от чи­сел.) При­ме­ры до­пус­ти­мых иден­ти­фи­ка­то­ров:

i
my_variable_name
v13
_dummy
$str
var sí = true;
var π = 3.14;

//Ja­va­Script ре­зер­ви­ру­ет ряд иден­ти­фи­ка­то­ров, ко­то­рые иг­ра­ют роль клю­че­вых слов са­мо­го язы­ка. Эти клю­че­вые сло­ва не мо­гут слу­жить иден­ти­фи­ка­то­ра­ми в про­грам­мах:
break
case
catch
continue
debugger
default
delete
do
else
false
finally
for
function
if
in
instanceof
new
null
return
switch
this
throw
true
try
typeof
var
void
while
with

//Ja­va­Script так­же ре­зер­ви­ру­ет не­ко­то­рые клю­че­вые сло­ва, ко­то­рые в на­стоя­щее вре­мя не яв­ля­ют­ся ча­стью язы­ка, но ко­то­рые мо­гут вой­ти в его со­став в бу­ду­щих вер­си­ях. Стан­дарт ECMAScript 5 ре­зер­ви­ру­ет сле­дую­щие сло­ва:
class
const
enum
export
extends
import
super

//Ни­же при­во­дит­ся до­пол­ни­тель­ный спи­сок слов, ко­то­рые до­пус­ти­мы в  обыч­ном про­грамм­ном ко­де Ja­va­Script и яв­ля­ют­ся за­ре­зер­ви­ро­ван­ны­ми в стро­гом ре­жи­ме:
implements
let
private
public
interface
package
protected
static
yield

//В  стро­гом ре­жи­ме так­же вво­дит­ся ог­ра­ни­че­ние на ис­поль­зо­ва­ние сле­дую­щих иден­ти­фи­ка­то­ров. Они не яв­ля­ют­ся за­ре­зер­ви­ро­ван­ны­ми сло­ва­ми в пол­ном по­ни­ма­нии, но они не мо­гут ис­поль­зо­вать­ся в ка­че­ст­ве имен пе­ре­мен­ных, функ­ций или па­ра­мет­ров:
arguments
eval

//Стан­дарт ECMA­Script 3 ре­зер­ви­ру­ет все клю­че­вые сло­ва язы­ка Java, и, хо­тя это тре­бо­ва­ние бы­ло ос­лаб­ле­но в стан­дар­те ECMAScript 5, тем не ме­нее сле­ду­ет из­бе­гать ис­поль­зо­ва­ния этих иден­ти­фи­ка­то­ров, ес­ли не­об­хо­ди­мо обес­пе­чить ра­бо­то­спо­соб­ность Ja­va­Script-ко­да при ис­поль­зо­ва­нии реа­ли­за­ций Ja­va­Script, со­от­вет­ст­вую­щих стан­дар­ту ECMA­Script 3:
abstract
double
goto
native
static
boolean
enum
implements
package
super
byte
export
import
private
synchronized
char
extends
int
protected
throws
class
final
interface
public
transient
const
float
long 
short
volatile

//В язы­ке Ja­va­Script име­ет­ся мно­же­ст­во пре­до­пре­де­лен­ных гло­баль­ных пе­ре­мен­ных и функ­ций, име­на ко­то­рых не сле­ду­ет ис­поль­зо­вать для соз­да­ния сво­их соб­ст­вен­ных пе­ре­мен­ных и функ­ций:
arguments
encodeURI
Infinity
Number
RegExp
Array
encodeURIComponent
isFinite
Object
String
Boolean
Error
isNaN
parseFloat
SyntaxError
Date
eval
JSON
parseInt
TypeError
decodeURI
EvalError
Math
RangeError
undefined
decodeURIComponent
Function
NaN
ReferenceError
URIError

//По­ми­мо де­ся­тич­ных це­лых ли­те­ра­лов Ja­va­Script рас­по­зна­ет ше­ст­на­дца­те­рич­ные зна­че­ния (по ос­но­ва­нию 16). Ше­ст­на­дца­те­рич­ные ли­те­ра­лы на­чи­на­ют­ся с по­сле­до­ва­тель­но­сти сим­во­лов «0x» или «0X», за ко­то­рой сле­ду­ет стро­ка ше­ст­на­дца­те­рич­ных цифр. Ше­ст­на­дца­те­рич­ная циф­ра – это од­на из цифр от 0 до 9 или букв от a (или A) до f (или F), пред­став­ляю­щих зна­че­ния от 10 до 15. Ни­же при­во­дят­ся при­ме­ры ше­ст­на­дца­те­рич­ных це­лых ли­те­ра­лов:
0xff           // 15*16 + 15 = 255 (по ос­но­ва­нию 10)
0xCAFE911

//Хо­тя стан­дарт ECMAScript не под­дер­жи­ва­ет пред­став­ле­ние це­лых ли­те­ра­лов в вось­ме­рич­ном фор­ма­те (по ос­но­ва­нию 8), не­ко­то­рые реа­ли­за­ции Ja­va­Script до­пус­ка­ют по­доб­ную воз­мож­ность. Вось­ме­рич­ный ли­те­рал на­чи­на­ет­ся с циф­ры 0, за ко­то­рой мо­гут сле­до­вать циф­ры от 0 до 7. На­при­мер:
0377           // 3*64 + 7*8 + 7 = 255 (по ос­но­ва­нию 10)

3.14
2345.789
.333333333333333333
6.02e23        // 6.02 × 10 23
1.4738223E-32  // 1.4738223 × 10 -32

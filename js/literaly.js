12                  //Число двенадцать
1.2                 //Число одна целая две десятых
"hello world"       //Строка текста
'Hi'                //Другая строка
true                //Логическое значение
false               //Другое логическое значение
/ja­va­script/gi    //Литерал "регулярного выражения" (для поиска по шаблону)
null                //Пустой объект
{ x:1, y:2 }        //Инициализатор объекта
[1,2,3,4,5]         //Инициализатор массива

//Идентификатор – это просто имя. В  JavaScript идентификаторы выступают в качестве имен переменных и функций,
// а также меток некоторых циклов. Идентификаторы в JavaScript должны начинаться с буквы, с символа
// подчеркивания (_) или знака доллара ($). Далее могут следовать любые буквы, цифры, символы подчеркивания или
// знаки доллара. (Цифра не может быть первым символом, так как тогда интерпретатору трудно будет отличать
// идентификаторы от чисел.) Примеры допустимых идентификаторов:

i
my_variable_name
v13
_dummy
$str
var sí = true;
var π = 3.14;

//JavaScript резервирует ряд идентификаторов, которые играют роль ключевых слов самого языка. Эти ключевые слова не
// могут служить идентификаторами в программах:

break
case
catch
continue
debugger
default
delete
do
else
false
finally
for
function
if
in
instanceof
new
null
return
switch
this
throw
true
try
typeof
var
void
while
with

//JavaScript также резервирует некоторые ключевые слова, которые в настоящее время не являются частью языка, но
// которые могут войти в его состав в будущих версиях. Стандарт ECMAScript 5 резервирует следующие слова:

        class
const
enum
export
extends
import
super

//Ниже приводится дополнительный список слов, которые допустимы в обычном программном коде JavaScript и являются
// зарезервированными в строгом режиме:

implements
let
private
public
interface
package
protected
static
yield

//В  строгом режиме также вводится ограничение на использование следующих идентификаторов. Они не являются
// зарезервированными словами в полном понимании, но они не могут использоваться в качестве имен переменных,
// функций или параметров:

arguments
eval

//Стандарт ECMA­Script 3 резервирует все ключевые слова языка Java, и, хотя это требование было ослаблено в
// стандарте ECMAScript 5, тем не менее следует избегать использования этих идентификаторов, если необходимо
// обеспечить работоспособность JavaScript-кода при использовании реализаций JavaScript, соответствующих стандарту
// ECMA­Script 3:

abstract
double
goto
native
static
boolean
enum
implements
package
super
byte
export
import
private
synchronized
char
extends
int
protected
throws
class
final
interface
public
transient
const
float
long 
short
volatile

//В языке JavaScript имеется множество предопределенных глобальных переменных и функций, имена которых не следует
// использовать для создания своих собственных переменных и функций:

arguments
encodeURI
Infinity
Number
RegExp
Array
encodeURIComponent
isFinite
Object
String
Boolean
Error
isNaN
parseFloat
SyntaxError
Date
eval
JSON
parseInt
TypeError
decodeURI
EvalError
Math
RangeError
undefined
decodeURIComponent
Function
NaN
ReferenceError
URIError

//Помимо десятичных целых литералов JavaScript распознает шестнадцатеричные значения (по основанию 16).
// Шестнадцатеричные литералы начинаются с последовательности символов «0x» или «0X», за которой следует строка
// шестнадцатеричных цифр. Шестнадцатеричная цифра – это одна из цифр от 0 до 9 или букв от a (или A) до f (или F),
// представляющих значения от 10 до 15. Ниже приводятся примеры шестнадцатеричных целых литералов:

0xff                    // 15*16 + 15 = 255 (по основанию 10)
0xCAFE911

//Хотя стандарт ECMAScript не поддерживает представление целых литералов в восьмеричном формате (по основанию 8),
// некоторые реализации JavaScript допускают подобную возможность. Восьмеричный литерал начинается с цифры 0,
// за которой могут следовать цифры от 0 до 7. Например:

0377           // 3*64 + 7*8 + 7 = 255 (по основанию 10)

3.14
2345.789
.333333333333333333
6.02e23        // 6.02 × 10 23
1.4738223E-32  // 1.4738223 × 10 -32

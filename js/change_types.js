'use strict'
//JavaScript может гибко преобразовывать один тип в другой. Мы уже могли убедиться в этом на примере логических
// значений: везде, где интерпретатор JavaScript ожидает получить логическое значение, можно указать значение
// любого типа и  JavaScript автоматически выполнит необходимое преобразование. Одни значения («истинные» значения)
// преобразуются в значение true, а другие («ложные») – в false. То же относится и к другим типам: если интерпретатор
// ожидает получить строку, он автоматически преобразует любое другое значение в строку.
//Если интерпретатор ожидает получить число, он попробует преобразовать имеющееся значение в число (в случае
// невозможности такого преобразования будет получено значение NaN). Например:

10 + " objects"  //=> "10 objects". Число 10 преобразуется в строку
"7" * "4"        //=> 28: обе строки преобразуются в числа
var n = 1 - "x"; //=> NaN: строка "x" не может быть преобразована в число
n + " objects"   //=> "NaN objects": NaN преобразуется в строку "NaN"

//описывается, как в JavaScript выполняется преобразование значений из одного типа в другой. Жирным шрифтом в
// таблице выделены значения, соответствующие преобразованиям, которые могут преподносить сюрпризы. Пустые ячейки
// соответствуют ситуациям, когда преобразование не требуется и не выполняется. Преобразования одного простого типа
// в другой, выполняются относительно просто. Преобразование в логический тип уже обсуждалось. Преобразование
// всех простых типов в строку четко определено. Преобразование в число выполняется немного сложнее.
// Строки, которые могут быть преобразованы в  числа, преобразуются в  числа. В  строке допускается наличие
// пробельных символов в начале и в конце, но присутствие других непробельных символов, которые не могут быть
// частью числа, при преобразовании строки в число приводят к возврату значения NaN. Некоторые особенности
// преобразования значений в числа могут показаться странными: значение true преобразуется в число 1, а значение
// false и пустая строка "" преобразуются в 0.

//Преобразование простых типов в объекты также выполняется достаточно просто:
//значения простых типов преобразуются в соответствующие объекты-обертки, как если бы вызывался конструктор String(),
// Number() или Boolean(). Исключение составляют значения null и undefined: любая попытка использовать их в
// контексте, где требуется объект, вместо преобразования будет приводить к возбуждению исключения TypeError.
// Преобразование объектов в простые типы выполняется значительно сложнее.

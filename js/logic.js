//Логические значения
//Ло­ги­че­ское зна­че­ние го­во­рит об ис­тин­но­сти или лож­но­сти че­го-то. Ло­ги­че­ский тип дан­ных име­ет толь­ко два до­пус­ти­мых ло­ги­че­ских зна­че­ния. Эти два зна­чения пред­став­ле­ны ли­те­ра­ла­ми true и false.
//Ло­ги­че­ские зна­че­ния обыч­но пред­став­ля­ют со­бой ре­зуль­тат опе­ра­ций срав­не­ния, вы­пол­няе­мых в Ja­va­Script-про­грам­мах. На­при­мер:
a == 4

//Это вы­ра­же­ние про­ве­ря­ет, рав­но ли зна­че­ние пе­ре­мен­ной a чис­лу 4. Ес­ли да, ре­зуль­та­том это­го срав­не­ния бу­дет ло­ги­че­ское зна­че­ние true. Ес­ли зна­че­ние пе­ре­мен­ной a не рав­но 4, ре­зуль­та­том срав­не­ния бу­дет false.
//Ло­ги­че­ские зна­че­ния обыч­но ис­поль­зу­ют­ся в управ­ляю­щих кон­ст­рук­ци­ях Ja­va­Script. На­при­мер, ин­ст­рук­ция if/else в Ja­va­Script вы­пол­ня­ет од­но дей­ст­вие, ес­ли ло­ги­че­ское зна­че­ние рав­но true, и дру­гое дей­ст­вие, ес­ли false. Обыч­но срав­не­ние, соз­даю­щее ло­ги­че­ское зна­чение, не­по­сред­ст­вен­но объ­еди­ня­ет­ся с ин­ст­рук­ци­ей, в ко­то­рой оно ис­поль­зу­ет­ся. Ре­зуль­тат вы­гля­дит так:
if (a == 4)
    b = b + 1;
else
    a = a + 1;
//Здесь вы­пол­ня­ет­ся про­вер­ка ра­вен­ст­ва зна­че­ния пе­ре­мен­ной a чис­лу 4. Ес­ли рав­но, к зна­че­нию пе­ре­мен­ной b до­бав­ля­ет­ся 1; в про­тив­ном слу­чае чис­ло 1 до­бав­ля­ет­ся к зна­че­нию пе­ре­мен­ной a.
//Как бу­дет го­во­рить­ся в  раз­де­ле  3.8, лю­бое зна­че­ние в  язы­ке Ja­va­Script мо­жет быть пре­об­ра­зо­ва­но в ло­ги­че­ское зна­че­ние. Сле­дую­щие зна­че­ния в ре­зуль­та­те та­ ко­го пре­об­ра­зо­ва­ния да­ют ло­ги­че­ское зна­че­ние (и за­тем ра­бо­та­ют как) false:
undefined
null
0
-0
NaN
""             // пус­тая стро­ка
//Все ос­таль­ные зна­че­ния, вклю­чая все объ­ек­ты (и мас­си­вы), при пре­об­ра­зо­ва­нии да­ют в ре­зуль­та­те зна­че­ние (и ра­бо­та­ют как) true. Зна­че­ние false и шесть зна­че­ний, ко­то­рые при пре­об­ра­зо­ва­нии при­во­дят­ся к это­му зна­че­нию, ино­гда на­зы­ва­ют лож­ны­ми, а все ос­таль­ные – ис­тин­ны­ми. В лю­бом кон­тек­сте, ко­гда ин­тер­пре­та­тор Ja­va­Script ожи­да­ет по­лу­чить ло­ги­че­ское зна­че­ние, лож­ные зна­че­ния ин­тер­пре­ти­ру­ют­ся как false, а ис­тин­ные зна­че­ния – как true.
//В ка­че­ст­ве при­ме­ра пред­по­ло­жим, что пе­ре­мен­ная o мо­жет хра­нить объ­ект или зна­че­ние null. В этом слу­чае мож­но яв­но про­ве­рить зна­че­ние пе­ре­мен­ной o на не­ра­вен­ст­во зна­че­нию null, как по­ка­за­но ни­же:
if (o !== null) ...

//Опе­ра­тор «не рав­но» !== срав­нит пе­ре­мен­ную o со зна­че­ни­ем null и вер­нет в ре­зуль­та­те true или false. Од­на­ко вы мо­же­те опус­тить опе­ра­тор срав­не­ния и по­ло­жить­ся на тот факт, что null яв­ля­ет­ся лож­ным зна­че­ни­ем, а объ­ект – ис­тин­ным:
if (o) ...

//В пер­вом слу­чае те­ло ин­ст­рук­ции if бу­дет вы­пол­не­но, толь­ко ес­ли зна­че­ние пе­ре­мен­ной o не рав­но null. Во вто­ром – ста­вит­ся ме­нее же­ст­кое ус­ло­вие: те­ло ин­ст­рук­ции if бу­дет вы­пол­не­но, толь­ко ес­ли o не со­дер­жит false или дру­гое лож­ное зна­че­ние (та­кое как null или undefined). Ка­кая ин­ст­рук­ция if боль­ше под­хо­дит для ва­шей про­грам­мы, за­ви­сит от то­го, ка­кие зна­че­ния мо­гут при­сваи­вать­ся пе­ре­мен­ной o. Ес­ли в про­грам­ме не­об­хо­ди­мо от­ли­чать зна­че­ние null от 0 и "", то сле­ду­ет ис­поль­зо­вать яв­ную опе­ра­цию срав­не­ния.

//Ло­ги­че­ские зна­че­ния име­ют ме­тод toString(), ко­то­рый мож­но ис­поль­зо­вать для пре­об­ра­зо­ва­ния этих зна­че­ний в стро­ки «true» или «false», но они не име­ют дру­гих по­лез­ных ме­то­дов. Не­смот­ря на про­сто­ту при­клад­но­го ин­тер­фей­са, в язы­ке име­ет­ся три важ­ных ло­ги­че­ских опе­ра­то­ра.

//Опе­ра­тор && вы­пол­ня­ет ло­ги­че­скую опе­ра­цию И. Он воз­вра­ща­ет ис­тин­ное зна­че­ние, толь­ко ес­ли оба опе­ран­да ис­тин­ны – в про­тив­ном слу­чае он воз­вра­ща­ет лож­ное зна­че­ние. Опе­ра­тор || вы­пол­ня­ет ло­ги­че­скую опе­ра­цию ИЛИ: он воз­вра­ща­ет ис­тин­ное зна­че­ние, ес­ли хо­тя бы один (или оба) из опе­ран­дов яв­ля­ет­ся ис­тин­ным, и лож­ное зна­че­ние – ес­ли оба опе­ран­да яв­ля­ют­ся лож­ны­ми. На­ко­нец, унар­ный опе­ра­тор ! вы­пол­ня­ет ло­ги­че­скую опе­ра­цию НЕ: он воз­вра­ща­ет зна­че­ние true для лож­но­го опе­ран­да и false – для ис­тин­но­го. На­при­мер:
if ((x == 0 && y == 0) || !(z == 0)) {
    // x и y со­дер­жат зна­че­ние 0 или z не рав­на ну­лю
}




'use strict';
// Операторы выполняют действия со значениями (операндами) и воспроизводят новое значение.
// Наиболее часто используемыми являются арифметические операторы:

3 + 2                           // => 5: сложение
3 - 2                           // => 1: вычитание
3 * 2                           // => 6: умножение
3 / 2                           // => 1.5: деление
points[1].x - points[0].x       // => 1: можно использовать более сложные операнды
"3" + "2"                       // => "32": + складывает числа, объединяет строки

// В JavaScript имеются некоторые сокращенные формы арифметических операторов

var count = 0;                  // Объявление переменной
count++;                        // Увеличение значения переменной на 1
count--;                        // Уменьшение значения переменной на 1
count += 2;                     // Добавить 2: то же, что count = count + 2;
count *= 3;                     // Умножить на 3: то же, что count = count * 3;
count                           // => 6: имена переменных сами являются выражениями

// Операторы сравнения позволяют проверить два значения на равенство
// или неравенство, выяснить, какое значение меньше или больше, и т. д.
// Они возвращают значение true или false.

var x = 2, y = 3;               // Знаки = выполняют присваивание, а не сравнение
x == y                          // => false: равенство
x != y                          // => true: неравенство
x < y                           // => true: меньше
x <= y                          // => true: меньше или равно
x > y                           // => false: больше
x >= y                          // => false: больше или рав­но
"two" == "three"                // => false: две разных строки
"two" > "three"    	            // => true: при упорядочении по алфавиту строка "tw" больше, чем "th"
false == (x > y)                // => true: false равно false

// Логические операторы объединяют или инвертируют логические значения
(x == 2) && (y == 3)            // => true: оба сравнения истинны. && - "И"
(x > 3) || (y < 3)              // => false: оба сравнения ложны. || - "ИЛИ"
!(x == y)                       // => true: ! инвертирует логическое значение

// Функции - это параметризованные блоки программного кода JavaScript, которые можно вызывать многократно.

function plus1(x) {             // Определить функцию с именем "plus1" и с параметром "x"
    return x+1;                 // Вернуть значение на 1 больше полученного
}                               // Функции заключаются в фигурные скобки
plus1(y)                        // => 4: y имеет значение 3, поэтому этот вызов вернет 3+1
var square = function(x) {      // Функции можно присваивать переменным
    return x*x;                 // Вычислить значение функции
};                              // Точка с запятой отмечает конец присваивания.
square(plus1(y))                // => 16: вызов двух функций в одном выражении

// Функции, присвоенные свойствам объектов, называются методами.
// Все объекты в JavaScript имеют методы:

var a = [];                     // Создать пустой массив
a.push(1,2,3);                  // Метод push() добавляет элементы в массив
a.reverse();                    // Другой метод: переставляет элементы в обратном порядке

// Можно определять собственные методы. Ключевое слово "this" ссылается на объект,
// в котором определен метод: в данном случае на массив points.

points.dist = function() {      // Метод вычисления расстояния между точками
    var p1 = this[0];           // Первый элемент массива, относительно которого вызван метод
    var p2 = this[1];           // Второй элемент объекта "this"
    var a = p2.x-p1.x;          // Разность координат X
    var b = p2.y-p1.y;          // Разность координат Y
    return Math.sqrt(a*a +      // Теорема Пифагора
                     b*b);      //Math.sqrt() вычисляет корень квадратный
};
points.dist()                   //=> 1.414: расстояние между 2-мя точками

// В JavaScript имеются условные инструкции и инструкции циклов, синтаксически похожие на аналогичные инструкции
// C, C++, Java и в других языках.

function abs(x) {               // Функция, вычисляющая абсолютное значение
    if (x >= 0) {               // Инструкция if ...
        return x;               // выполняет этот код, если сравнение дает true.
    }                           // Конец предложения if.
    else {                      // Необязательное предложение else выполняет свой код,
        return -x;              // если сравнение дает значение false.
    }                           // Фигурные скобки можно опустить, если предложение
                                // содержит 1 инструкцию.
}                               // Обратите внимание на инструкции return внутри if/else.

function factorial(n) {         //Функция, вычисляющая факториал
    var product = 1;            //Начать с произведения, равного 1
    while(n > 1) {              //Повторять инструкции в {}, пока выраж. в () истинно
        product *= n;           //Сокращенная форма выражения product = product * n;
        n--;                    //Сокращенная форма выражения n = n - 1
    }                           //Конец цикла
    return product;             //Вернуть произведение
}

factorial(4)                    // => 24: 1*4*3*2

function factorial2(n) {        // Другая версия, использующая другой цикл
    var i, product = 1;         // Начать с 1
    for(i=2; i <= n; i++)       // i автоматически увеличивается с 2 до n
        product *= i;           // Выполнять в каждом цикле. {} можно опустить,
                                // если тело цикла состоит из 1 инструкции
    return product;             // Вернуть факториал
}
factorial2(5)                   // => 120: 1*2*3*4*5

// Определение функции-конструктора для инициализации нового объекта Point

function Point(x,y) { 		    // По соглашению имя конструкторов начинается с заглавного символа
    this.x = x;       		    // this - ссылка на инициализируемый объект
this.y = y;           		    // Сохранить аргументы в свойствах объекта
}                         	    // Ничего возвращать не требуется

// Что­бы создать новый экземпляр, необходимо вызвать функцию-конструктор с ключевым словом "new"

var p = new Point(1, 1); 	    // Точка на плоскости с координатами (1,1)

// Методы объектов Point определяются за счет присваивания функций свойствам объекта прототипа, ассоциированного
// с функцией-конструктором.

Point.prototype.r = function() {
    return Math.sqrt(           // Вернуть корень квадратный от x 2 + y 2
        this.x * this.x +       // this - это объект Point, относительно которого...
        this.y * this.y         // ...вызывается метод.
    );
};

// Теперь объект p типа Point (и все последующие объекты Point) наследует метод r()

p.r()                           // => 1.414...

//Простейший способ объявления обработчиков событий заключается в использовании HTML-атрибутов, имена которых
//начинаются с приставки «on». Обработчик «onclick» особенно удобен при создании простых тестовых программ.
//Предположим, что вы сохранили функции debug() и hide(), представленные выше, в файлах с именами
//debug.js и hide.js. В этом случае можно было бы написать простой тестовый HTML-файл, использующий
//элементы <button> с атрибутами onclick, определяющими обработчики событий:

<script src="debug.js"></script>
<script src="hide.js"></script>
Hello
<button onclick="hide(this,true); debug('hide button 1');">Hide1</button>
<button onclick="hide(this); debug('hide button 2');">Hide2</button>
World

//Ниже приводится еще один пример программного кода на клиентском JavaScript, использующего механизм событий.
//Он регистрирует обработчик очень важного события «load» и дополнительно демонстрирует более сложный способ
//регистрации обработчика события «click»:

//Событие "load" возбуждается, когда документ будет полностью загружен.
// Обычно мы вынуждены ждать этого события, прежде чем можно будет запустить
// наш программный код JavaScript.

window.onload = function() { 		       // Запустит функцию после загрузки документа

                                           // Отыскать все теги <img> в документе
    var images = document.getElementsByTagName("img");

//Обойти их все в цикле, добавить к каждому обработчик события "click",
//чтобы обеспечить сокрытие любого изображения после щелчка на нем.

    for(var i = 0; i < images.length; i++) {
        var image = images[i];
        if (image.addEventListener)    		// Другой способ регистрации обработчика
            image.addEventListener("click", hide, false);
        else                           		// Для совместимости с версией IE8 и ниже
            image.attachEvent("onclick", hide);
    }
						                    // Это функция-обработчик событий, которая регистрируется выше
    function hide(event) { event.target.style.visibility = "hidden"; }
};

//Пре­об­ра­зо­ва­ние объ­ек­тов в ло­ги­че­ские зна­че­ния вы­пол­ня­ет­ся очень про­сто: все объ­ек­ты (вклю­чая мас­си­вы и функ­ции) пре­об­ра­зу­ют­ся в зна­че­ние true. Это спра­вед­ли­во и для объ­ек­тов-обер­ток: ре­зуль­та­том вы­зо­ва new Boolean(false) яв­ля­ет­ся объ­ект, а не про­стое зна­че­ние, по­это­му он так­же пре­об­ра­зу­ет­ся в зна­че­ние true.Пре­об­ра­зо­ва­ние объ­ек­та в стро­ку и пре­об­ра­зо­ва­ние объ­ек­та в чис­ло вы­пол­ня­ет­ся вы­зо­вом со­от­вет­ст­вую­ще­го ме­то­да объ­ек­та. Все ос­лож­ня­ет­ся тем, что объ­ек­ты в  язы­ке Ja­va­Script име­ют два раз­ных ме­то­да для вы­пол­не­ния пре­об­ра­зо­ва­ний, а так­же на­ли­чи­ем не­сколь­ких спе­ци­аль­ных слу­ча­ев, опи­сы­вае­мых ни­же. Об­ра­ти­те вни­ма­ние, что пра­ви­ла пре­об­ра­зо­ва­ния объ­ек­тов в стро­ки и чис­ла, опи­сы­вае­мые здесь, при­ме­ня­ют­ся толь­ко к объ­ек­там са­мо­го язы­ка Ja­va­Script. Объ­ек­ты сре­ды вы­пол­не­ния (на­при­мер, оп­ре­де­ляе­мые веб-бро­узе­ра­ми) мо­гут пре­ду­смат­ри­вать соб­ст­вен­ные ал­го­рит­мы пре­об­ра­зо­ва­ния в чис­ла и стро­ки. Все объ­ек­ты на­сле­ду­ют два ме­то­да пре­об­ра­зо­ва­ния. Пер­вый из них на­зы­ва­ет­ся toString(), он воз­вра­ща­ет стро­ко­вое пред­став­ле­ние объ­ек­та. По умол­ча­нию ме­тод toString() не воз­вра­ща­ет ни­че­го осо­бен­но ин­те­рес­но­го (хо­тя эта ин­фор­ма­ция ино­гда мо­жет ока­зать­ся по­лез­ной, как бу­дет по­ка­за­но в

({x:1, y:2}).toString() // => "[object Object]"

//Мно­гие клас­сы оп­ре­де­ля­ют бо­лее спе­циа­ли­зи­ро­ван­ные вер­сии ме­то­да toString(). На­при­мер, ме­тод toString() клас­са Array пре­об­ра­зу­ет все эле­мен­ты мас­си­ва в стро­ки и объ­еди­ня­ет ре­зуль­та­ты в од­ну стро­ку, встав­ляя за­пя­тые ме­ж­ду ни­ми. Ме­тод toString() клас­са Function воз­вра­ща­ет стро­ко­вое пред­став­ле­ние функ­ции, за­ви­ся­щее от реа­ли­за­ции. На прак­ти­ке обыч­но реа­ли­за­ции пре­об­ра­зу­ют поль­зо­ва­тель­ские функ­ции в  стро­ки с  ис­ход­ным про­грамм­ным ко­дом на язы­ке Ja­va­Script.

//Класс Date оп­ре­де­ля­ет ме­тод toString(), воз­вра­щаю­щий стро­ку с да­той и вре­ме­нем в удо­бо­чи­тае­мом фор­ма­те (ко­то­рый мо­жет быть ра­зо­бран сред­ст­ва­ми Ja­va­Script). Класс RegExp оп­ре­де­ля­ет ме­тод toString(), пре­об­ра­зую­щий объ­ект RegExp в стро­ку, ко­то­рая вы­гля­дит как ли­те­рал ре­гу­ляр­но­го вы­ра­же­ния:

[1,2,3].toString()                  //=> "1,2,3"
(function(x) { f(x); }).toString()  //=> "function(x) {\n f(x);\n}"
/\d+/g.toString()                   //=> "/\\d+/g"
new Date(2010,0,1).toString()       //=> "Fri Jan 01 2010 00:00:00 GMT+0300"

//Дру­гая функ­ция пре­об­ра­зо­ва­ния объ­ек­тов на­зы­ва­ет­ся valueOf(). За­да­ча это­го ме­то­да оп­ре­де­ле­на не так чет­ко: пред­по­ла­га­ет­ся, что он дол­жен пре­об­ра­зо­вать объ­ект в пред­став­ляю­щее его про­стое зна­че­ние, ес­ли та­кое зна­че­ние су­ще­ст­ву­ет. Объ­ек­ты по сво­ей при­ро­де яв­ля­ют­ся со­став­ны­ми зна­че­ния­ми, и боль­шин­ст­во объ­ек­тов не мо­гут быть пред­став­ле­ны в ви­де един­ст­вен­но­го про­сто­го зна­че­ния, по­это­му по умол­ча­нию ме­тод valueOf() воз­вра­ща­ет не про­стое зна­че­ние, а сам объ­ект. Клас­сы-оберт­ки оп­ре­де­ля­ют ме­то­ды valueOf(), воз­вра­щаю­щие обер­ну­тые про­стые зна­че­ния. Мас­си­вы, функ­ции и ре­гу­ляр­ные вы­ра­же­ния на­сле­ду­ют ме­тод по умол­ча­нию. Вы­зов ме­то­да valueOf() эк­зем­п­ля­ров этих ти­пов воз­вра­ща­ет сам объ­ект.Класс Date оп­ре­де­ля­ет ме­тод valueOf(), воз­вра­щаю­щий да­ту во внут­рен­нем пред­став­ле­нии: ко­ли­че­ст­во мил­ли­се­кунд, про­шед­ших с 1 ян­ва­ря 1970 го­­да:

var d = new Date(2010, 0, 1);       // 1 ян­ва­ря 2010 го­да, (вре­мя Мо­с­ков­ское)
d.valueOf()                         // => 1262293200000

//Те­перь, ра­зо­брав­шись с ме­то­да­ми toString() и valueOf(), мож­но пе­рей­ти к об­су­ж­де­нию осо­бен­но­стей пре­об­ра­зо­ва­ния объ­ек­тов в стро­ки и в чис­ла. Уч­ти­те, что су­ще­ст­ву­ет не­сколь­ко спе­ци­аль­ных слу­ча­ев, ко­гда Ja­va­Script вы­пол­ня­ет пре­об­ра­зо­ва­ние объ­ек­тов в  про­стые зна­че­ния не­сколь­ко ина­че. Эти осо­бые слу­чаи рас­смат­ри­ва­ют­ся в кон­це дан­но­го раз­де­ла. Пре­об­ра­зо­ва­ние объ­ек­тов в  стро­ку ин­тер­пре­та­тор Ja­va­Script вы­пол­ня­ет в  два эта­па:

	//•	 Ес­ли объ­ект име­ет ме­тод toString(), ин­тер­пре­та­тор вы­зы­ва­ет его. Ес­ли он воз­вра­ща­ет про­стое зна­че­ние, ин­тер­пре­та­тор пре­об­ра­зу­ет зна­че­ние в стро­ку (ес­ли оно не яв­ля­ет­ся стро­кой) и  воз­вра­ща­ет ре­зуль­тат пре­об­ра­зо­ва­ния. Об­ра­ти­те вни­ма­ние, что пра­ви­ла пре­об­ра­зо­ва­ний про­стых зна­че­ний в стро­ку чет­ко оп­ре­де­ле­ны для всех ти­пов и пе­ре­чис­ле­ны
	//•	 Ес­ли объ­ект не име­ет ме­то­да toString() или этот ме­тод не воз­вра­ща­ет про­стое зна­че­ние, то ин­тер­пре­та­тор про­ве­ря­ет на­ли­чие ме­то­да valueOf(). Ес­ли этот ме­тод оп­ре­де­лен, ин­тер­пре­та­тор вы­зы­ва­ет его. Ес­ли он воз­вра­ща­ет про­стое зна­че­ние, ин­тер­пре­та­тор пре­об­ра­зу­ет это зна­че­ние в стро­ку (ес­ли оно не яв­ля­ет­ся стро­кой) и воз­вра­ща­ет ре­зуль­тат пре­об­ра­зо­ва­ния.
	//•	 В про­тив­ном слу­чае ин­тер­пре­та­тор де­ла­ет вы­вод, что ни toString(), ни valueOf() не по­зво­ля­ют по­лу­чить про­стое зна­че­ние и воз­бу­ж­да­ет ис­клю­че­ние TypeError. При пре­об­ра­зо­ва­нии объ­ек­та в чис­ло ин­тер­пре­та­тор вы­пол­ня­ет те же дей­ст­вия, но пер­вым пы­та­ет­ся при­ме­нить ме­тод valueOf():
	//•	 Ес­ли объ­ект име­ет ме­тод valueOf(), воз­вра­щаю­щий про­стое зна­че­ние, ин­тер­пре­та­тор пре­об­ра­зу­ет (при не­об­хо­ди­мо­сти) это зна­че­ние в чис­ло и воз­вра­ща­ет ре­зуль­тат.
	//•	 Ина­че, ес­ли объ­ект име­ет ме­тод toString(), воз­вра­щаю­щий про­стое зна­че­ние, ин­тер­пре­та­тор вы­пол­ня­ет пре­об­ра­зо­ва­ние и воз­вра­ща­ет по­лу­чен­ное зна­че­ние.
	//•	 В про­тив­ном слу­чае воз­бу­ж­да­ет­ся ис­клю­че­ние TypeError. Опи­сан­ный ал­го­ритм пре­об­ра­зо­ва­ния объ­ек­та в чис­ло объ­яс­ня­ет, по­че­му пус­той мас­сив пре­об­ра­зу­ет­ся в чис­ло 0, а мас­сив с един­ст­вен­ным эле­мен­том мо­жет быть пре­об­ра­зо­ван в обыч­ное чис­ло. Мас­си­вы на­сле­ду­ют по умол­ча­нию ме­тод valueOf(), ко­то­рый воз­вра­ща­ет сам объ­ект, а не про­стое зна­че­ние, по­это­му при пре­об­ра­зо­ва­нии мас­си­ва в чис­ло ин­тер­пре­та­тор опи­ра­ет­ся на ме­тод toString(). Пус­тые мас­си­вы пре­об­ра­зу­ют­ся в  пус­тую стро­ку. А  пус­тая стро­ка пре­об­ра­зу­ет­ся в  чис­ло 0. Мас­сив с един­ст­вен­ным эле­мен­том пре­об­ра­зу­ет­ся в ту же стро­ку, что и един­ст­вен­ный эле­мент мас­си­ва. Ес­ли мас­сив со­дер­жит един­ст­вен­ное чис­ло, это чис­ло пре­об­ра­зу­ет­ся в стро­ку, а за­тем опять в чис­ло. Опе­ра­тор + в язы­ке Ja­va­Script вы­пол­ня­ет сло­же­ние чи­сел и кон­ка­те­на­цию строк. Ес­ли ка­кой-ли­бо из его опе­ран­дов яв­ля­ет­ся объ­ек­том, Ja­va­Script пре­об­ра­зу­ет объ­ект, ис­поль­зуя спе­ци­аль­ное пре­об­ра­зо­ва­ние объ­ек­та в про­стое зна­че­ние вме­сто пре­об­ра­зо­ва­ния объ­ек­та в чис­ло, ис­поль­зуе­мо­го дру­ги­ми ариф­ме­ти­че­ски­ми опе­ра­то­ра­ми. То же от­но­сит­ся и  к  опе­ра­то­ру ра­вен­ст­ва ==. Ес­ли вы­пол­ня­ет­ся срав­не­ние объ­ек­та с про­стым зна­че­ни­ем, опе­ра­тор вы­пол­нит пре­об­ра­зо­ва­ние объ­ек­та с ис­поль­зо­ва­ни­ем пра­вил пре­об­ра­зо­ва­ния в про­стое зна­че­ние.

//Пре­об­ра­зо­ва­ние объ­ек­тов в про­стые зна­че­ния, ис­поль­зуе­мое опе­ра­то­ра­ми + и ==, пре­ду­смат­ри­ва­ет осо­бый под­ход для объ­ек­тов Date. Класс Date яв­ля­ет­ся един­ст­вен­ным ти­пом дан­ных в  ба­зо­вом Ja­va­Script, ко­то­рый оп­ре­де­ля­ет ос­мыс­лен­ные пре­об­ра­зо­ва­ния и в стро­ку, и в чис­ло. Пре­об­ра­зо­ва­ние лю­бо­го объ­ек­та, не яв­ляю­ще­го­ся да­той, в про­стое зна­че­ние ос­но­ва­но на пре­об­ра­зо­ва­нии в чис­ло (ко­гда пер­вым при­ме­ня­ет­ся ме­тод valueOf()), то­гда как для объ­ек­тов ти­па Date ис­поль­зу­ет­ся пре­об­ра­зо­ва­ние в стро­ку (пер­вым при­ме­ня­ет­ся ме­тод toString()). Од­на­ко пре­об­ра­зо­ва­ние вы­пол­ня­ет­ся не со­всем так, как бы­ло опи­са­но вы­ше: про­стое зна­че­ние, воз­вра­щае­мое ме­то­дом valueOf() или toString(), ис­поль­зу­ет­ся не­по­сред­ст­вен­но, без до­пол­ни­тель­но­го пре­об­ра­зо­ва­ния в чис­ло или в стро­ку.

//Опе­ра­тор < и дру­гие опе­ра­то­ры от­но­ше­ний вы­пол­ня­ют пре­об­ра­зо­ва­ние объ­ек­тов в про­стые зна­че­ния по­доб­но опе­ра­то­ру ==, но не вы­де­ляя объ­ек­ты Date: для лю­бо­го объ­ек­та сна­ча­ла пред­при­ни­ма­ет­ся по­пыт­ка при­ме­нить ме­тод valueOf(), а  за­тем ме­тод toString(). Лю­бое про­стое зна­че­ние, по­лу­чен­ное та­ким спо­со­бом, ис­поль­зу­ет­ся не­по­сред­ст­вен­но, без даль­ней­ше­го пре­об­ра­зо­ва­ния в чис­ло или в стро­ку. +, ==, != и опе­ра­то­ры от­но­ше­ний яв­ля­ют­ся един­ст­вен­ны­ми, вы­пол­няю­щи­ми спе­ци­аль­ное пре­об­ра­зо­ва­ние стро­ки в  про­стое зна­че­ние. Дру­гие опе­ра­то­ры вы­пол­ня­ют бо­лее яв­ные пре­об­ра­зо­ва­ния в за­дан­ный тип и не пре­ду­смат­ри­ва­ют спе­ци­аль­ной об­ра­бот­ки объ­ек­тов Date. Опе­ра­тор -, на­при­мер, пре­об­ра­зу­ет свои опе­ран­ды в чис­ла. Сле­дую­щий фраг­мент де­мон­ст­ри­ру­ет по­ве­де­ние опе­ра­то­ров +, -, == и > при ра­бо­те с объ­ек­та­ми Date:

var now = new Date(); // Соз­дать объ­ект Date
typeof (now + 1)      // => "стро­ка": + пре­об­ра­зу­ет да­ту в стро­ку
typeof (now - 1)      // => "чис­ло": - вы­пол­нит пре­об­ра­зо­ва­ние объ­ек­та в чис­ло
now == now.toString() // => true: не­яв­ное и яв­ное пре­об­ра­зо­ва­ние в стро­ку
now > (now -1)        // => true: > пре­об­ра­зу­ет объ­ект Date в чис­ло







